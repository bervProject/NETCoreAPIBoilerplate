# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
pr:
- main

trigger:
- main

pool:
  vmImage: 'ubuntu-24.04'

resources:
  containers:
  - container: postgres
    image: postgres:17-alpine
    env:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: testdb
    ports:
      - 5432:5432
  - container: azurite
    image: mcr.microsoft.com/azure-storage/azurite
    ports:
      - 10000:10000
      - 10001:10001
      - 10002:10002

variables:
  buildConfiguration: 'Release'
  imageName: 'berviantoleo/net-core-boilerplate'
  dotnetSdkVersion: '9.0.x'
  postgresConnectionString: 'Host=localhost;Database=testdb;Username=postgres;Password=postgres'

jobs:
- job: "BuildTest"
  services:
    postgres: postgres
    azurite: azurite
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
    inputs:
      version: '$(dotnetSdkVersion)'
      includePreviewVersions: true
  - task: DotNetCoreCLI@2
    displayName: 'Restore project dependencies'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
  - task: DotNetCoreCLI@2
    displayName: 'Build the project - $(buildConfiguration)'
    inputs:
      command: 'build'
      arguments: '--no-restore --configuration $(buildConfiguration)'
      projects: '**/*.csproj'
  - script: |
       dotnet tool install --global dotnet-ef
       dotnet tool restore
       dotnet ef database update --startup-project BervProject.WebApi.Boilerplate --project BervProject.WebApi.Boilerplate
    displayName: 'Migrate DB'
    env:
      ConnectionStrings__BoilerplateConnectionString: $(postgresConnectionString)
  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests - $(buildConfiguration)'
    inputs:
      command: 'test'
      arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
      publishTestResults: true
      projects: '**/*.Test.csproj'
    env:
      ConnectionStrings__BoilerplateConnectionString: $(postgresConnectionString)
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage report'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
  - script: curl -Os https://uploader.codecov.io/latest/linux/codecov && chmod +x codecov && ./codecov
    displayName: 'Publish to Codecov'
  - task: DotNetCoreCLI@2
    displayName: 'Publish the project - $(buildConfiguration)'
    inputs:
      command: 'publish'
      projects: '**/BervProject.WebApi.Boilerplate.csproj'
      publishWebProjects: false
      arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
      zipAfterPublish: true
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    condition: succeeded()

- job: "Docker"
  steps:
  - task: Docker@2
    displayName: Build an image
    inputs:
      repository: $(imageName)
      command: build
      Dockerfile: Dockerfile

- job: "CodeQuality"
  pool:
    vmImage: "windows-2022"
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
    inputs:
      version: '$(dotnetSdkVersion)'
      includePreviewVersions: true
  - task: DotNetCoreCLI@2
    displayName: 'Restore project dependencies'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
  - task: DotNetCoreCLI@2
    displayName: 'Build the project - $(buildConfiguration)'
    inputs:
      command: 'build'
      arguments: '--no-restore --configuration $(buildConfiguration)'
      projects: '**/*.csproj'
  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests - $(buildConfiguration)'
    inputs:
      command: 'test'
      arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
      publishTestResults: true
      projects: |
        'BervProject.WebApi.Test/BervProject.WebApi.Test.csproj'
    env:
      ConnectionStrings__BoilerplateConnectionString: $(postgresConnectionString)
  - task: NDependTask@1
    env:
      SYSTEM_ACCESSTOKEN: $(system.accesstoken)

